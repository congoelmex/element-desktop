name: Build and Test
on:
  pull_request: { }
  push:
    branches: [ develop, master ]
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  fetch:
    name: Prepare
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          cache: "yarn"

      - name: Install Deps
        run: "yarn install --pure-lockfile"

      - name: Fetch Element Web
        run: yarn run fetch --noverify --cfgdir element.io/nightly

      - uses: actions/upload-artifact@v3
        with:
          name: webapp
          retention-days: 1
          path: |
            webapp.asar
            package.json

  build_windows:
    needs: fetch
    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            arch: x64
          - target: i686-pc-windows-msvc
            arch: x86
            build-args: --ia32
    name: Windows (${{ matrix.arch }})
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: webapp

      - name: Cache .hak
        uses: actions/cache@v3
        with:
          key: ${{ runner.os }}-${{ hashFiles('./yarn.lock') }}
          path: |
            ./.hak

      - name: Set up build tools
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: ${{ matrix.arch }}

      # ActiveTCL package on choco is from 2015,
      # this one is newer but includes more than we need
      - name: Choco install tclsh
        shell: pwsh
        run: |
          choco install -y magicsplat-tcl-tk --no-progress
          echo "${HOME}/AppData/Local/Apps/Tcl86/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Choco install NetWide Assembler
        shell: pwsh
        run: |
          choco install -y nasm --no-progress
          echo "C:/Program Files/NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}

      - uses: actions/setup-node@v3
        with:
          cache: "yarn"

      # Does not need branch matching as only analyses this layer
      - name: Install Deps
        run: "yarn install --pure-lockfile"

      - name: Build Natives
        run: |
          refreshenv
          yarn build:native --target ${{ matrix.target }}

      - name: Build App
        run: "yarn build --publish never -w ${{ matrix.build-args }}"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: win-${{ matrix.arch }}
          path: dist
          retention-days: 1

  test_windows:
    needs: build_windows
    strategy:
      matrix:
        include:
          - arch: x64
            executable_path: "./dist/win-unpacked/Element.exe"
          - arch: x86
            executable_path: "./dist/win-ia32-unpacked/Element.exe"
    name: Windows (${{ matrix.arch }}) Test
    runs-on: windows-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: win-${{ matrix.arch }}

      # TODO test installer
      - name: Run tests
        run: "yarn test"
        timeout-minutes: 5
        env:
          ELEMENT_DESKTOP_EXECUTABLE: ${{ matrix.executable_path }}

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: win-${{ matrix.arch }}
          path: test_artifacts
          retention-days: 1

  build_linux:
    needs: fetch
    strategy:
      matrix:
        include:
          - sqlcipher: system
          - sqlcipher: static
            static: 1
    name: 'Linux (sqlcipher: ${{ matrix.sqlcipher }})'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: webapp

      - name: Cache .hak
        uses: actions/cache@v3
        with:
          key: ${{ hashFiles('./yarn.lock') }}
          path: |
            ./.hak

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Install libsqlcipher-dev
        if: matrix.sqlcipher == 'system'
        run: sudo apt-get install -y libsqlcipher-dev

      - uses: actions/setup-node@v3
        with:
          cache: "yarn"

      # Does not need branch matching as only analyses this layer
      - name: Install Deps
        run: "yarn install --pure-lockfile"

      - name: Build Natives
        run: "yarn build:native"
        env:
          SQLCIPHER_STATIC: ${{ matrix.static }}

      - name: Build App
        run: "yarn build --publish never"

      - name: Install .deb
        run: "sudo apt install ./dist/*.deb"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-sqlcipher-${{ matrix.sqlcipher }}
          path: dist
          retention-days: 1

  test_linux:
    needs: build_linux
    strategy:
      matrix:
        include:
          - sqlcipher: system
          - sqlcipher: static
    name: 'Linux (sqlcipher: ${{ matrix.sqlcipher }}) Test'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: linux-sqlcipher-${{ matrix.sqlcipher }}

      - name: Install .deb
        run: "sudo apt install ./dist/*.deb"

      - name: Run tests
        uses: GabrielBB/xvfb-action@v1
        timeout-minutes: 5
        with:
          run: "yarn test"
        env:
          ELEMENT_DESKTOP_EXECUTABLE: "element-desktop"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-sqlcipher-${{ matrix.sqlcipher }}
          path: test_artifacts
          retention-days: 1

  build_macos:
    needs: fetch
    name: macOS (universal)
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          name: webapp

      - name: Cache .hak
        uses: actions/cache@v3
        with:
          key: ${{ hashFiles('./yarn.lock') }}
          path: |
            ./.hak

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin

      - uses: actions/setup-node@v3
        with:
          cache: "yarn"

      # Does not need branch matching as only analyses this layer
      - name: Install Deps
        run: "yarn install --pure-lockfile"

      - name: Build Natives
        run: "yarn build:native:universal"

      - name: Build App
        run: "yarn build:universal --publish never"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: dist
          retention-days: 1

  test_macos:
    needs: build_macos
    name: macOS (universal) Test
    runs-on: macos-latest
    steps:
      - uses: paulz/prepare-macos@main

      - uses: actions/download-artifact@v3
        with:
          name: macos

      - name: Run tests
        run: "yarn test"
        timeout-minutes: 5
        env:
          ELEMENT_DESKTOP_EXECUTABLE: "./dist/mac-universal/Element.app/Contents/MacOS/Element"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos
          path: test_artifacts
          retention-days: 1
