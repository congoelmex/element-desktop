name: Build
on:
  pull_request: { }
  push:
    branches: [ develop, master ]
jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
        os: [ windows-2016 ]
    steps:
      - uses: actions/checkout@v2

      - name: Cache .hak
        uses: actions/cache@v3
        with:
          key: ${{ hashFiles('./yarn.lock') }}
          path: |
            ./.hak

      # Windows specific setup tasks
      - name: Install nmake
        uses: ilammy/msvc-dev-cmd@v1
        if: ${{ matrix.os == 'windows-latest' }}

#      - name: Install Microsoft Build Tools
#        uses: microsoft/setup-msbuild@v1.1
#        if: ${{ matrix.os == 'windows-latest' }}

#      - name: Install Strawberry Perl
#        uses: shogo82148/actions-setup-perl@v1
#        with:
#          perl-version: "5.32"
#          distribution: strawberry
#        if: ${{ matrix.os == 'windows-latest' }}

      # ActiveTCL package on choco is from 2015,
      # this one is newer but includes more than we need
      - name: Choco install tclsh
        shell: pwsh
        run: |
          choco install -y magicsplat-tcl-tk --no-progress
          echo "${HOME}/AppData/Local/Apps/Tcl86/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Choco install NetWide Assembler
        shell: pwsh
        run: |
          choco install -y nasm --no-progress
          echo "C:/Program Files/NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        if: ${{ matrix.os == 'windows-latest' }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - uses: actions/setup-node@v3
        with:
          cache: "yarn"

      # Does not need branch matching as only analyses this layer
      - name: Install Deps
        run: "yarn install --pure-lockfile"

      # Windows/Linux steps
      - name: Build Natives
        shell: pwsh
        run: |
          refreshenv
          yarn build:native
        if: ${{ matrix.os != 'macos-latest' }}

      - name: Build App
        run: "yarn build --publish never"
        if: ${{ matrix.os != 'macos-latest' }}

      # macOS (Universal) steps
      - name: Build Natives
        run: "yarn build:native:universal"
        if: ${{ matrix.os == 'macos-latest' }}

      - name: Build App
        run: "yarn build:universal --publish never"
        if: ${{ matrix.os == 'macos-latest' }}
