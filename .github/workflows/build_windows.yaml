# This workflow relies on actions/cache to store the hak dependency artifacts as they take a long time to build
# Due to this extra care must be taken to only ever run all build_* scripts against the same branch to ensure
# the correct cache scoping, and additional care must be taken to not run untrusted actions on the develop branch.
on:
    workflow_call:
        secrets:
            ESIGNER_USER_NAME:
                required: false
            ESIGNER_USER_PASSWORD:
                required: false
            ESIGNER_USER_TOTP:
                required: false
            ESIGNER_CREDENTIAL_ID:
                required: false
        inputs:
            arch:
                type: string
                required: true
                description: "The architecture to build for, one of 'x64' | 'x86'"
            version:
                type: string
                required: false
                description: "Version string to override the one in package.json, used for non-release builds"
            sign:
                type: string
                required: false
                description: "Whether to sign & notarise the build, requires 'packages.element.io' environment"
            deploy-mode:
                type: string
                required: false
                description: "Whether to arrange artifacts in the arrangement needed for deployment, skipping unrelated ones"
jobs:
    build:
        runs-on: windows-latest
        environment: ${{ inputs.sign && 'packages.element.io' || '' }}
        steps:
            - uses: kanga333/variable-mapper@master
              id: config
              with:
                  key: "${{ inputs.arch }}"
                  export_to: output
                  map: |
                      {
                        "x64": {
                          "target": "x86_64-pc-windows-msvc",
                          "test": "win-unpacked"
                        },
                        "x86": {
                          "target": "i686-pc-windows-msvc",
                          "build-args": "--ia32",
                          "test": "win-ia32-unpacked"
                        }
                      }

            - uses: actions/checkout@v3

            - uses: actions/download-artifact@v3
              with:
                  name: webapp

            - name: Cache .hak
              id: cache
              uses: actions/cache@v3
              with:
                  key: ${{ runner.os }}-${{ hashFiles('hakDependencies.json', 'electronVersion') }}
                  path: |
                      ./.hak

            - name: Set up build tools
              uses: ilammy/msvc-dev-cmd@v1
              with:
                  arch: ${{ inputs.arch }}

            # ActiveTCL package on choco is from 2015,
            # this one is newer but includes more than we need
            - name: Choco install tclsh
              if: steps.cache.outputs.cache-hit != 'true'
              shell: pwsh
              run: |
                  choco install -y magicsplat-tcl-tk --no-progress
                  echo "${HOME}/AppData/Local/Apps/Tcl86/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

            - name: Choco install NetWide Assembler
              if: steps.cache.outputs.cache-hit != 'true'
              shell: pwsh
              run: |
                  choco install -y nasm --no-progress
                  echo "C:/Program Files/NASM" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

            - name: Install Rust
              if: steps.cache.outputs.cache-hit != 'true'
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable
                  target: ${{ steps.config.outputs.target }}

            - uses: actions/setup-node@v3
              with:
                  cache: "yarn"

            # Does not need branch matching as only analyses this layer
            - name: Install Deps
              run: "yarn install --pure-lockfile"

            - name: Build Natives
              if: steps.cache.outputs.cache-hit != 'true'
              run: |
                  refreshenv
                  yarn build:native --target ${{ steps.config.outputs.target }}

            - name: Install and configure eSigner CKA
              id: esigner
              if: inputs.sign
              run: |
                  # Download
                  Invoke-WebRequest -OutFile eSigner_CKA_1.0.3.zip "https://www.ssl.com/download/ssl-com-esigner-cka-1-0-3"
                  Expand-Archive -Force eSigner_CKA_1.0.3.zip
                  Remove-Item eSigner_CKA_1.0.3.zip
                  Move-Item -Destination "eSigner_CKA_1.0.3.exe" -Path "eSigner_CKA_1.0.3\SSL.COM eSigner CKA_1.0.3.exe"
                  New-Item -ItemType Directory -Force -Path ${{ env.INSTALL_DIR }}
                  
                  # Install
                  ./eSigner_CKA_1.0.3.exe /CURRENTUSER /VERYSILENT /SUPPRESSMSGBOXES /DIR="${{ env.INSTALL_DIR }}" | Out-Null
                  
                  # Configure
                  # ${{ env.INSTALL_DIR }}/eSignerCKATool.exe config -mode "${{ env.MODE }}" -user "${{ secrets.ESIGNER_USER_NAME }}" -pass "${{ secrets.ESIGNER_USER_PASSWORD }}" -totp "${{ secrets.ESIGNER_USER_TOTP }}" -key "${{ env.MASTER_KEY_FILE }}" -r
                  ${{ env.INSTALL_DIR }}/eSignerCKATool.exe config -mode sandbox -user esigner_demo -pass "esignerDemo#1" -totp "RDXYgV9qju+6/7GnMf1vCbKexXVJmUVr+86Wq/8aIGg=" -key "${{ env.MASTER_KEY_FILE }}" -r
                  ${{ env.INSTALL_DIR }}/eSignerCKATool.exe unload
                  ${{ env.INSTALL_DIR }}/eSignerCKATool.exe load
                  
                  # Extract thumbprint
                  $CodeSigningCert = Get-ChildItem Cert:\CurrentUser\My -CodeSigningCert | Select-Object -First 1
                  $Thumbprint = $CodeSigningCert.Thumbprint
                  $SubjectName = ($CodeSigningCert.Subject -split "," | ConvertFrom-StringData).CN
                  echo "config-args=--signtool-thumbprint '$Thumbprint' --signtool-subject-name '$SubjectName'" >> $env:GITHUB_OUTPUT
              env:
                  # XXX: UPDATE THIS BEFORE MERGING
                  MODE: sandbox
                  INSTALL_DIR: C:\Users\runneradmin\eSignerCKA
                  MASTER_KEY_FILE: C:\Users\runneradmin\eSignerCKA\master.key

            - name: '[Nightly] Resolve version'
              id: nightly
              if: inputs.version != ''
              shell: bash
              run: |
                  echo "config-args=--nightly '${{ inputs.version }}'" >> $GITHUB_OUTPUT

            - name: Build App
              run: |
                  yarn ts-node scripts/generate-builder-config.ts ${{ steps.nightly.outputs.config-args }} ${{ steps.esigner.outputs.config-args }}
                  yarn build --publish never -w --config electron-builder.json ${{ steps.config.outputs.build-args }}
              env:
                  SIGNTOOL_PATH: "C:/Program Files (x86)/Windows Kits/10/bin/10.0.22000.0/x86/signtool.exe"

            - name: Prepare artifacts for deployment
              if: inputs.deploy-mode
              shell: bash
              run: |
                  mv dist _dist
                  mkdir -p dist/install/win32/${{ inputs.arch }}/msi dist/update/win32/${{ inputs.arch }}
                  mv _dist/squirrel-windows*/*.exe dist/install/win32/${{ inputs.arch }}/
                  mv _dist/squirrel-windows*/*.nupkg dist/update/win32/${{ inputs.arch }}/
                  mv _dist/squirrel-windows*/RELEASES dist/update/win32/${{ inputs.arch }}/
                  # mv _dist/*.msi dist/install/win32/${{ inputs.arch }}/msi/

            # We don't wish to store the installer for every nightly ever, so we only keep the latest
            - name: '[Nightly] Strip version from installer file'
              if: inputs.deploy-mode && inputs.version != ''
              shell: bash
              run: |
                  mv dist/install/win32/${{ inputs.arch }}/*.exe "dist/install/win32/${{ inputs.arch }}/Element Nightly Setup.exe"
                  mv dist/install/win32/${{ inputs.arch }}/msi/*.msi "dist/install/win32/${{ inputs.arch }}/msi/Element Nightly Setup.msi"

            - name: '[Release] Prepare release latest symlink'
              if: inputs.deploy-mode && inputs.version == ''
              shell: bash
              run: |
                  LATEST=$(find dist -type f -iname "*.exe" | xargs -0 -n1 -- basename)
                  ln -s "dist/install/win32/${{ inputs.arch }}/$LATEST" "dist/install/win32/${{ inputs.arch }}/Element Setup.exe"

            - name: Upload Artifacts
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ inputs.deploy-mode && 'packages.element.io' || format('win-{0}', inputs.arch) }}
                  path: dist
                  retention-days: 1

            - uses: OrbitalOwen/desktop-screenshot-action@0.1
              if: failure()
              with:
                  file-name: 'desktop.jpg'

            - uses: actions/upload-artifact@v3
              if: failure()
              with:
                  name: failed
                  path: |
                      desktop.jpg
                      dist/
                      C:/Users/runneradmin/AppData/Roaming/eSignerCKA/
                  retention-days: 1
